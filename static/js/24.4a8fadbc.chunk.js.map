{"version":3,"sources":["routesDom/Page/Login/ForgotPassword.js"],"names":["tokenLocal","localStorage","getItem","ForgotPassword","history","useHistory","Form","useForm","form","dispatch","useDispatch","accessToken","useParams","useState","loadingFrom","setLoadingFrom","state","useContext","UserContext","token","setToken","setUser","user","setIdUser","idUser","patchCart","useEffect","a","push","error","console","log","onchangeResetPassword","value","data","password","trim","putResetPassword","actionResult","currentUser","unwrapResult","_id","className","onFinish","Item","name","rules","min","message","required","type","hasFeedback","Password","placeholder","dependencies","getFieldValue","validator","rule","Promise","reject","resolve","shouldUpdate","loading","htmlType","disabled","isFieldsTouched","getFieldsError","filter","errors","length"],"mappings":"oSAWMA,EAAaC,aAAaC,QAAQ,SACzB,SAASC,IACtB,IAAMC,EAAUC,cAChB,EAAeC,IAAKC,UAAbC,EAAP,oBACMC,EAAWC,cACTC,EAAgBC,cAAhBD,YACR,EAAsCE,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAQC,qBAAWC,KAEzB,cAA0BF,EAAMG,MAAhC,GAAOA,EAAP,KAAcC,EAAd,KACSC,EAAT,YAAoBL,EAAMM,KAA1B,MACSC,EAAT,YAAsBP,EAAMQ,OAA5B,MACOC,EAAP,YAAoBT,EAAMS,UAA1B,MAEAC,oBAAS,sBAAC,sBAAAC,EAAA,sDACR,IACMR,GAASM,EACXrB,EAAQwB,KAAKH,IACJzB,GAAcmB,IACvBf,EAAQwB,KAAK,KAEf,MAAOC,GACPC,QAAQC,IAAIF,GARN,2CAUP,CAAClB,EAAaQ,IACjB,IAAMa,EAAqB,uCAAG,WAAOC,GAAP,mBAAAN,EAAA,0DACxBM,IAAStB,EADe,uBAE1BI,GAAe,GACTmB,EAAO,CAAEC,SAAUF,EAAME,SAASC,OAAQzB,YAAaA,GAHnC,SAICF,EAAS4B,YAAiBH,IAJ3B,OAIpBI,EAJoB,QAKpBC,EAAcC,YAAaF,MAE/BvB,GAAe,GACfK,EAASmB,EAAYpB,OACrBE,EAAQkB,EAAYjB,MACpBC,EAAUgB,EAAYjB,KAAKmB,MAVH,2CAAH,sDAc3B,OACE,mCACE,qBAAKC,UAAU,cAAf,SACE,qBAAKA,UAAU,aAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,6DACA,eAAC,IAAD,CAAMlC,KAAMA,EAAMmC,SAAUX,EAA5B,UACE,cAAC,IAAKY,KAAN,CACEF,UAAU,iBACVG,KAAK,WACLC,MAAO,CACL,CACEC,IAAK,EACLC,QAAS,yEAEX,CACEC,UAAU,EACVC,KAAM,SACNF,QAAS,iEAGbG,aAAW,EAdb,SAgBE,cAAC,IAAMC,SAAP,CAAgBC,YAAY,kCAE9B,cAAC,IAAKT,KAAN,CACEC,KAAK,UACLS,aAAc,CAAC,YACfH,aAAW,EACXL,MAAO,CACL,CACEG,UAAU,EACVD,QAAS,6DACTE,KAAM,UAER,gBAAGK,EAAH,EAAGA,cAAH,MAAwB,CACtBC,UADsB,SACZC,EAAMxB,GACd,OAAKA,GAASsB,EAAc,cAAgBtB,EAGrCyB,QAAQC,OAAO,yEAFbD,QAAQE,cAbzB,SAoBE,cAAC,IAAMR,SAAP,CAAgBC,YAAY,4CAE9B,qBAAKX,UAAU,mBAAf,SACE,cAAC,IAAKE,KAAN,CAAWiB,cAAc,EAAzB,SACG,kBACC,cAAC,IAAD,CACEX,KAAK,UACLY,QAAShD,EACTiD,SAAS,SACTrB,UAAU,8BACVsB,UACGxD,EAAKyD,iBAAgB,IACtBzD,EAAK0D,iBAAiBC,QAAO,qBAAGC,OAAoBC,UAAQA,OAPhE","file":"static/js/24.4a8fadbc.chunk.js","sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\n// dispatch AP\nimport { putResetPassword } from 'features/User/patchAPI';\n// context\nimport { UserContext } from 'contexts/UserContext';\n// component\nimport './style.css';\nconst tokenLocal = localStorage.getItem('token');\nexport default function ForgotPassword() {\n  const history = useHistory();\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { accessToken } = useParams();\n  const [loadingFrom, setLoadingFrom] = useState(false);\n  const state = useContext(UserContext);\n  // create\n  const [token, setToken] = state.token;\n  const [, setUser] = state.user;\n  const [, setIdUser] = state.idUser;\n  const [patchCart] = state.patchCart;\n  // useEffect\n  useEffect(async () => {\n    try {\n      if (token && patchCart) {\n        history.push(patchCart);\n      } else if (tokenLocal || token) {\n        history.push('/');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }, [accessToken, token]);\n  const onchangeResetPassword = async (value) => {\n    if (value && accessToken) {\n      setLoadingFrom(true);\n      const data = { password: value.password.trim(), accessToken: accessToken };\n      const actionResult = await dispatch(putResetPassword(data));\n      const currentUser = unwrapResult(actionResult);\n      if (currentUser) {\n        setLoadingFrom(false);\n        setToken(currentUser.token);\n        setUser(currentUser.user);\n        setIdUser(currentUser.user._id);\n      }\n    }\n  };\n  return (\n    <>\n      <div className=\"group-login\">\n        <div className=\"main-login\">\n          <div className=\"container-login\">\n            <h3>Mật Khẩu Mới</h3>\n            <Form form={form} onFinish={onchangeResetPassword}>\n              <Form.Item\n                className=\"input-password\"\n                name=\"password\"\n                rules={[\n                  {\n                    min: 8,\n                    message: 'Mật khẩu quá ngắn ít nhất 8 ký tự !',\n                  },\n                  {\n                    required: true,\n                    type: 'string',\n                    message: 'Vui lòng nhập mật khẩu của bạn !',\n                  },\n                ]}\n                hasFeedback\n              >\n                <Input.Password placeholder=\"Mật khẩu mới\" />\n              </Form.Item>\n              <Form.Item\n                name=\"confirm\"\n                dependencies={['password']}\n                hasFeedback\n                rules={[\n                  {\n                    required: true,\n                    message: 'Vui lòng xác nhập lại mật khẩu !',\n                    type: 'string',\n                  },\n                  ({ getFieldValue }) => ({\n                    validator(rule, value) {\n                      if (!value || getFieldValue('password') === value) {\n                        return Promise.resolve();\n                      }\n                      return Promise.reject('Mật khẩu bạn đã nhập không khớp !');\n                    },\n                  }),\n                ]}\n              >\n                <Input.Password placeholder=\"Nhập lại mật khẩu\" />\n              </Form.Item>\n              <div className=\"group-login-link\">\n                <Form.Item shouldUpdate={true}>\n                  {() => (\n                    <Button\n                      type=\"primary\"\n                      loading={loadingFrom}\n                      htmlType=\"submit\"\n                      className=\"login-form-button btn-login\"\n                      disabled={\n                        !form.isFieldsTouched(true) ||\n                        form.getFieldsError().filter(({ errors }) => errors.length).length\n                      }\n                    >\n                      Lưu mật khẩu\n                    </Button>\n                  )}\n                </Form.Item>\n              </div>\n            </Form>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}